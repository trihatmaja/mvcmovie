name: Build, Publish .NET, Dockerize (Kaniko), and Push

on:
  push:
    branches: [main]

jobs:
  build-and-push:
    runs-on: [self-hosted, Linux]
    steps:
      # 1. Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup .NET
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # 3. Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # 4. Build
      - name: Build
        run: dotnet build --no-restore --configuration Release

      # 5. Test
      - name: Test
        run: dotnet test --no-build --verbosity normal

      # 6. Publish output to folder
      - name: Publish
        run: dotnet publish -c Release -r win-x64 --self-contained false -o ./publish

      # 7. Upload artifact
      - name: Upload published app as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-publish
          path: ./publish

      # 8. Docker log in
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 9. Docker build
      - name: Build and tag Docker image
        run: |
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-8)
          REPO_NAME=$(basename "${GITHUB_REPOSITORY}")
          IMAGE="docker.io/${{ secrets.DOCKER_USERNAME }}/${REPO_NAME}"
          docker build -t "${IMAGE}:latest" .
          docker tag "${IMAGE}:latest" "${IMAGE}:${SHORT_SHA}"

      # 10. Docker push
      - name: Push Docker image (both tags)
        run: |
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-8)
          REPO_NAME=$(basename "${GITHUB_REPOSITORY}")
          IMAGE="docker.io/${{ secrets.DOCKER_USERNAME }}/${REPO_NAME}"
          docker push "${IMAGE}:latest"
          docker push "${IMAGE}:${SHORT_SHA}"

  deploy-iis:
    name: Deploy to IIS
    needs: build-and-push
    runs-on: [self-hosted, Windows, deploy-iis]
    steps:
      - name: Download published artifact
        uses: actions/download-artifact@v4
        with:
          name: dotnet-publish
          path: ./publish
      - name: Deploy to IIS (Stop/Deploy/Start)
        shell: powershell
        run: |
          $repoName = $env:GITHUB_REPOSITORY.Split("/")[1]
          $iisPath = "C:\inetpub\wwwroot\$repoName"
          $siteName = $repoName
          $appPoolName = $repoName

          Import-Module WebAdministration

          # Stop site dan app pool
          if (Get-Website -Name $siteName -ErrorAction SilentlyContinue) {
            Stop-Website -Name $siteName
          }
          if (Get-WebAppPoolState -Name $appPoolName -ErrorAction SilentlyContinue) {
            Stop-WebAppPool -Name $appPoolName
          }

          # Wait 
          Start-Sleep -Seconds 10 # Tunggu minimal 2-5 detik

          # Deploy file
          if (-not (Test-Path $iisPath)) {
            New-Item -Path $iisPath -ItemType Directory
          }
          Copy-Item -Path ./publish/* -Destination $iisPath -Recurse -Force

          # Start app pool dan site
          if (Get-WebAppPoolState -Name $appPoolName -ErrorAction SilentlyContinue) {
            Start-WebAppPool -Name $appPoolName
          }
          if (Get-Website -Name $siteName -ErrorAction SilentlyContinue) {
            Start-Website -Name $siteName
          }
  deploy-k8s:
    name: Deploy to k8s
    needs: build-and-push
    runs-on: [self-hosted, Linux]
    steps:
    - name: generate-secrets
      run: |
        echo CONNECTION_STRINGS=${{ secrets.CONNECTION_STRINGS }} > deploy/base/secrets.env
    - name: Patch image tag
      run: |
        SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-8)
        sed -i "s|newTag: .*|newTag: ${SHORT_SHA}|" deploy/poc/kustomization.yaml
    - name: apply-manifest
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ secrets.KUBE_CONFIG }}
    - run: |
        kubectl apply -k deploy/poc
        kubectl rollout status deployment/mvcmovie