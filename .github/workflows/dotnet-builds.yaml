name: Build, Publish .NET, Dockerize (Kaniko), and Push

on:
  push:
    branches: [main]

jobs:
  build-and-push:
    runs-on: [self-hosted, Linux]
    steps:
      # 1. Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup .NET
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # 3. Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # 4. Build
      - name: Build
        run: dotnet build --no-restore --configuration Release

      # 5. Test
      - name: Test
        run: dotnet test --no-build --verbosity normal

      # 6. Publish output to folder
      - name: Publish
        run: dotnet publish -c Release -r win-x64 --self-contained false -o ./publish

      # 7. Upload artifact
      - name: Upload published app as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-publish
          path: ./publish

      # 8. Install img
      - name: Install img
        run: |
          curl -sSL https://github.com/genuinetools/img/releases/download/v0.5.11/img-linux-amd64 -o /usr/local/bin/img
          chmod +x /usr/local/bin/img

      # 9. Build & push docker
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and tag Docker image
        run: |
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-8)
          REPO_NAME=$(basename "${GITHUB_REPOSITORY}")
          IMAGE="docker.io/${{ secrets.DOCKER_USERNAME }}/${REPO_NAME}"
          docker build -t "${IMAGE}:latest" .
          docker tag "${IMAGE}:latest" "${IMAGE}:${SHORT_SHA}"

      - name: Push Docker image (both tags)
        run: |
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-8)
          REPO_NAME=$(basename "${GITHUB_REPOSITORY}")
          IMAGE="docker.io/${{ secrets.DOCKER_USERNAME }}/${REPO_NAME}"
          docker push "${IMAGE}:latest"
          docker push "${IMAGE}:${SHORT_SHA}"

  deploy:
    name: Deploy to IIS
    needs: build-and-push
    runs-on: [self-hosted, Windows, deploy-iis]
    steps:
      - name: Download published artifact
        uses: actions/download-artifact@v4
        with:
          name: dotnet-publish
          path: ./publish
      - name: Stop IIS app pool
        shell: powershell
        run: |
          Import-Module WebAdministration
          Stop-WebAppPool -Name '$(basename "${GITHUB_REPOSITORY}")'
      - name: Copy published files to IIS folder (overwrite)
        shell: powershell
        run: |
          $IISPath = "C:\inetpub\wwwroot\$(basename "${GITHUB_REPOSITORY}")"
          if (-not (Test-Path $IISPath)) {
            New-Item -ItemType Directory -Path $IISPath
          }
          Copy-Item ./publish/* $IISPath -Recurse -Force
      - name: Start IIS app pool
        shell: powershell
        run: |
          Import-Module WebAdministration
          Start-WebAppPool -Name '$(basename "${GITHUB_REPOSITORY}")'

