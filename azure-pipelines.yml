trigger:
  branches:
    include:
      - main

pool:
  name: 'Default'

variables:
- group: docker-creds
- name: SHORT_SHA
  value: $(echo $(Build.SourceVersion) | cut -c1-8)

stages:
- stage: BuildApp
  displayName: 'Build App'
  jobs:
  - job: BuildApp
    displayName: 'Build App'
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET Core'
      inputs:
        version: '9.x'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
      displayName: 'dotnet restore dependency'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration Release'
      displayName: 'dotnet build Release'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        arguments: '--no-restore --verbosity normal'
      displayName: 'dotnet test'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        arguments: '--configuration Release -r win-x64 -o ./publish-windows'
      displayName: 'dotnet publish Release'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: $(System.DefaultWorkingDirectory)/publish-windows
        artifactName: WebApp-MvcMovie-Windows-x64
  - job: ScanApp
    displayName: Security Scan
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: MicrosoftSecurityDevOps@1
      displayName: 'Microsoft Security DevOps'


- stage: BuildDocker
  displayName: Build and push docker image
  jobs:
  - job: BuildDocker
    displayName: Build Docker
    pool:
      name: 'self-hosted'
    steps:
    - task: DockerInstaller@0
      inputs:
        dockerVersion: '28.3.1'
      displayName: 'Install docker'
    - script: |
        docker login -u $(DOCKER_USERNAME) -p $(DOCKER_PASSWORD)
        docker build -t trihatmaja/mvcmovie:$(SHORT_SHA) .
      displayName: 'Build Docker Image'
  - job: ScanDocker
    dependsOn: BuildDocker
    displayName: 'Scan Docker'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: MicrosoftSecurityDevOps@1
      displayName: 'Microsoft Security DevOps'
      inputs:
        tools: 'trivy'
      env:
        GDN_DEBUG_DROP: 'true'
        GDN_TRIVY_VULNTYPES: 'os, library'
        GDN_TRIVY_SEVERITIES: 'CRITICAL, HIGH'
        GDN_TRIVY_ACTION: 'image'
        GDN_TRIVY_TARGET: 'trihatmaja/mvcmovie:$(SHORT_SHA)'
  - job: PushDocker
    dependsOn: ScanDocker
    displayName: 'Push Docker'
    steps:
    - script: |
        docker push trihatmaja/mvcmovie:$(SHORT_SHA)
      displayName: 'Push Docker Image'